/** * hijax框架的基石: 模块组件 * 一个模组生命周期内事件顺序依次为:  *				  --> moduleloadfailed *				 | * beforemoduleload - *				 | *				  --> moduleload -> modulecreate -> moduleinit -> beforemoduleremove -> moduleremove      */(function($) {	$.widget('hijax.module', $.hijax.widget, {		options: {			dataApi: null, 			tplEngine: null, 			template: undefined, 			data: null, 			// 模块状态保持			keepState: false, 			params: null,             tplData: null,             title: '', 			// 在父模块与子模块之间通信的数据			commData: {}		},         // 标识模块是否可以安全删除(模块在初始化阶段若被删除, 将会导致某些操作找不到dom)        ready: false,         // 从当前模块发出的请求		_requestInstances: [],         _attachEvent: function() {            var             self = this,             $elem = this.element,             prefix = this.widgetEventPrefix,                         // condition event: 特殊事件            condevt = prefix + 'ready';                        $elem.on(prefix + 'init.remove', function() {			    var evtmap = {};                evtmap[prefix + 'hide'] = function() {                    echo('trigger modulehide');                    $elem.hide();                    if (!this.options.keepState) {                        // 触发widget原生remove事件                        echo('触发widget原生remove事件');                        //if (this.ready) {                        var vevt = $.Event('before' + this.widgetName + 'remove');                        // this._trigger(vevt, this, false);                        this._trigger(vevt, null, false);                        if (!vevt.isDefaultPrevented()) {                            $elem.remove();                        }                        /*                        // 还原初始值                            this.ready = false;                        } else {                            // A->B->A->B                            if (!$elem._isListened(condevt, 'remove')) {                                                                $elem.on(condevt + '.remove', function() {                                    echo('触发模块ready事件');                                    $elem.remove();                                    if (window.CollectGarbage) {                                        setTimeout(window.CollectGarbage, 1);                                    }                                });                                                                  }                                                    }                        */                        if (window.CollectGarbage) {                            setTimeout(window.CollectGarbage, 0);                        }                    }                };                evtmap[prefix + 'show'] = function(e, data) {                    /*                    // A->B->A                    if (!$elem._isListened(condevt, 'remove')) {                        $elem.off(condevt + '.remove');                    }                    */                    echo('trigger moduleshow');                    $elem.show();                };                $elem.on(evtmap);            });                    }, 		// 模板解析		_init: function() {			var             tplData = this.options.tplData,             dataApi = this.options.dataApi,             tplEngine = this.options.tplEngine,             self = this,             $elem = this.element,             prefix = this.widgetEventPrefix,             mc = this.options.moduleContainer,             _append = function(tplData) {                // 模板解析完毕后, 插入文档; 插入之前, 判断容器是否已被移除, 避免造成内存泄露                if ($.contains(document, mc[0])) {                    echo('模板解析完毕, 插入文档');                    // 事实上, 若模块相对容器为绝对定位, 则非常方便以后扩展; 比如, 模块切换动画                    // 目前, 模块的切换方法仅为显示与隐藏                    if (self.options.changeModule) {                        if ($.hijax.activeModule) {                            $.hijax.activeModule.hide();                        }                    }                    $elem.appendTo(mc);					if (self.options.isSubModule) {						$elem.prepend('<ul class="pager"><li class="previous"><a type="back" href="' + $.hijax.activeModule.attr('url') + '">&larr; 返回</a></li></ul>');					}                } else {                    // 释放引用                    mc = null;                } 				self._trigger($.Event('init'), tplData);								             };            if ($.type(tplData) === 'function') {                tplData = tplData.call(this);            }            if (dataApi) {                $.extend(dataApi, {                    global: false,                     dataType: 'json',                     success: function(data) {                        if (tplData !== null) {                            if ($.type(data) === 'object' && $.type(tplData) === 'object') {                                tplData = $.extend(true, {}, data, tplData);                            }                        } else {                            tplData = data;                        }                                                //if (tplData) {                            $.extend(self.options.data, tplData);							self.options.tplData = tplData;                            if (tplEngine !== false) {                                $elem.template(self.options.template, tplData, tplEngine);                            }                             // $elem._overrideListener(prefix + 'init', tplData);                        //} else {                            // 无模板数据                            //$elem.html('');                        //}                        _append(tplData);                    },                     error: function() {}                });                                this.rpc(dataApi);                            } else {                $elem.html(self.options.template);                _append();            }		}, 		// 从模块内部发出的请求		rpc: function(opts) {            var             self = this,             _requestInstances = this._requestInstances,			deferred;			            if (opts.success) {                var _success = opts.success;                opts.success = function() {					var idx = $.inArray(deferred, _requestInstances);					_success.apply(this, arguments);                    _requestInstances.splice(idx, 1);                    /*                    if (_progress[url]) {                        var key;                        delete _progress[url];                        if ($.isEmptyObject(_progress)) {                            // 触发moduleready事件                            self._trigger($.Event('ready'));                        }                          for (key in _progress)                             loaded = self.total--;                        if (loaded <= total) {                            // 触发进度                            self._trigger($.Event('progress'), {loaded: loaded, total: total});                        }                    }                    */                                    }            }			_requestInstances.push((deferred = $.hijax.rpc(opts)));            return deferred;		},         // 销毁模块同时, 溢出未完成请求        destroy: function(keepData) {            if (!$.hijax.dev) {                // 保存的是模板与函数                keepData = true;            }            $.hijax.widget.prototype.destroy.apply(this, [keepData]);            $.each(this._requestInstances, function(key) {                if (this.net) {                    this.abort();                } else {                    $.hijax.appCache.abort(key);                }            });        }	});})(jQuery);